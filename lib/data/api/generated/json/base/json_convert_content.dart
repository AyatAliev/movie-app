// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.

import 'package:flutter_api_with_retrofit/domain/model/movie_info_entity.dart';
import 'package:flutter_api_with_retrofit/domain/model/popular_entity.dart';
import '../movie_info_entity_helper.dart';
import '../popular_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case MovieInfoEntity:
				return movieInfoEntityFromJson(data as MovieInfoEntity, json) as T;
			case MovieInfoGenres:
				return movieInfoGenresFromJson(data as MovieInfoGenres, json) as T;
			case MovieInfoProductionCompanies:
				return movieInfoProductionCompaniesFromJson(data as MovieInfoProductionCompanies, json) as T;
			case MovieInfoProductionCountries:
				return movieInfoProductionCountriesFromJson(data as MovieInfoProductionCountries, json) as T;
			case MovieInfoSpokenLanguages:
				return movieInfoSpokenLanguagesFromJson(data as MovieInfoSpokenLanguages, json) as T;
			case PopularEntity:
				return popularEntityFromJson(data as PopularEntity, json) as T;
			case PopularResults:
				return popularResultsFromJson(data as PopularResults, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case MovieInfoEntity:
				return movieInfoEntityToJson(data as MovieInfoEntity);
			case MovieInfoGenres:
				return movieInfoGenresToJson(data as MovieInfoGenres);
			case MovieInfoProductionCompanies:
				return movieInfoProductionCompaniesToJson(data as MovieInfoProductionCompanies);
			case MovieInfoProductionCountries:
				return movieInfoProductionCountriesToJson(data as MovieInfoProductionCountries);
			case MovieInfoSpokenLanguages:
				return movieInfoSpokenLanguagesToJson(data as MovieInfoSpokenLanguages);
			case PopularEntity:
				return popularEntityToJson(data as PopularEntity);
			case PopularResults:
				return popularResultsToJson(data as PopularResults);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (MovieInfoEntity).toString()){
			return MovieInfoEntity().fromJson(json);
		}
		if(type == (MovieInfoGenres).toString()){
			return MovieInfoGenres().fromJson(json);
		}
		if(type == (MovieInfoProductionCompanies).toString()){
			return MovieInfoProductionCompanies().fromJson(json);
		}
		if(type == (MovieInfoProductionCountries).toString()){
			return MovieInfoProductionCountries().fromJson(json);
		}
		if(type == (MovieInfoSpokenLanguages).toString()){
			return MovieInfoSpokenLanguages().fromJson(json);
		}
		if(type == (PopularEntity).toString()){
			return PopularEntity().fromJson(json);
		}
		if(type == (PopularResults).toString()){
			return PopularResults().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<MovieInfoEntity>[] is M){
			return data.map<MovieInfoEntity>((e) => MovieInfoEntity().fromJson(e)).toList() as M;
		}
		if(<MovieInfoGenres>[] is M){
			return data.map<MovieInfoGenres>((e) => MovieInfoGenres().fromJson(e)).toList() as M;
		}
		if(<MovieInfoProductionCompanies>[] is M){
			return data.map<MovieInfoProductionCompanies>((e) => MovieInfoProductionCompanies().fromJson(e)).toList() as M;
		}
		if(<MovieInfoProductionCountries>[] is M){
			return data.map<MovieInfoProductionCountries>((e) => MovieInfoProductionCountries().fromJson(e)).toList() as M;
		}
		if(<MovieInfoSpokenLanguages>[] is M){
			return data.map<MovieInfoSpokenLanguages>((e) => MovieInfoSpokenLanguages().fromJson(e)).toList() as M;
		}
		if(<PopularEntity>[] is M){
			return data.map<PopularEntity>((e) => PopularEntity().fromJson(e)).toList() as M;
		}
		if(<PopularResults>[] is M){
			return data.map<PopularResults>((e) => PopularResults().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}